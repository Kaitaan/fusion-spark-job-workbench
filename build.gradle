buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "2.0.0"
    id 'scala'
    id 'java'
    id 'idea'
    id 'eclipse'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '0.1'

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: "com.github.johnrengelman.shadow"
    // Relocates everything by default. Comment out to avoid relocation
    apply plugin: "scala"
    apply plugin: "java"
    apply plugin: 'com.github.johnrengelman.plugin-shadow'

    dependencies {
        compileOnly getLibs()
        testCompile 'org.scalatest:scalatest_2.11:3.0.0'
        testCompile 'junit:junit:4.12'
        testCompile getLibs()
    }

    repositories {
        mavenCentral()
    }

    shadowJar {
        configurations = [project.configurations.compile]
        dependencies {}
    }
}

project.ext.dcFusionHome = {
    def dcFusionHome = null

    try {
        dcFusionHome = project.getProperty("dcFusionHome")
    } catch (MissingPropertyException e) {
        logger.warn("\tThe variable 'dcFusionHome' is not defined in the ~/.gradle/gradle.properties")
    }

    def dcFusionHomeD = System.getProperty('dcFusionHome')
    if (dcFusionHomeD) {
        dcFusionHome = dcFusionHomeD
    }

    if (!dcFusionHome) {
        throw new MissingPropertyException("The variable 'dcFusionHome' isn't defined neither " +
                "in ~/.gradle/gradle.properties nor as -DdcFusionHome")
    }

    if (dcFusionHome.endsWith("/")) {
        dcFusionHome = dcFusionHome.substring(0, dcFusionHome.length() - 1)
    }

    return dcFusionHome
}()

def getLibs() {
    def sparkJars = fileTree(
            dir: getSparkDistJars(dcFusionHome),
            includes: ["*.jar"]
    )
    def shadedJar = getShadedJar(dcFusionHome).getAbsolutePath()
    def libsJars = files(sparkJars.files.collect { dep -> dep.getPath()}, shadedJar)
    return libsJars
}

def getShadedJar(baseDir) {
    if (!file(baseDir).isDirectory()) {
        throw new FileNotFoundException("Fusion home directory '${baseDir}' does not exist. To build, add " +
                "-DdcFusionHome=<fusion_location>")
    } else {
        // Find the shaded jar
        def shadedJars = new FileNameByRegexFinder().getFileNames("${baseDir}/var/api/work", "spark-shaded-").collect { f -> new File(f)}
        def shadedJar = shadedJars.max {f1, f2 -> Long.compare(f1.lastModified(), f2.lastModified())}
        return shadedJar
    }
}

def getSparkDistJars(baseDir) {
    if (!file(baseDir).isDirectory()) {
        throw new FileNotFoundException("Fusion home directory '${baseDir}' does not exist. To build, add " +
                "-DdcFusionHome=<fusion_location>")
    } else {
        return "${baseDir}/apps/spark-dist/jars"
    }
}

def getSparkLibDir(baseDir) {
    if (!file(baseDir).isDirectory()) {
        throw new FileNotFoundException("Fusion home directory '${baseDir}' does not exist. To build, add " +
                "-DdcFusionHome=<fusion_location>")
    } else {
        return "${baseDir}/apps/spark/lib"
    }
}

def getFusionVersion() {
    def props = new Properties()
    new File("${dcFusionHome}/fusion.build").withInputStream { stream -> props.load(stream) }
    VersionNumber.parse(props.getProperty('fusion.version'))
}

allprojects {
    //some useful common things
    task printVersions << { task ->
        println "Gradle is version " + GradleVersion.current()
        println "Gradle is running with JVM " + Jvm.current()
    }

    task listCompileOnlyJars << { task ->
        configurations.compileOnly.each { File file -> println file.path }
    }
}
